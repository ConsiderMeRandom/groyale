<!doctype html>
<meta charset="utf-8">
<title>Keyboard movment</title>

<body>
  <script src="/student/globalit/2019/330187/learningPixi-master/pixi/pixi.min.js"></script>
  <script>
    //Aliases
    var Application = PIXI.Application,
      Container = PIXI.Container,
      loader = PIXI.loader,
      resources = PIXI.loader.resources,
      TextureCache = PIXI.utils.TextureCache,
      Sprite = PIXI.Sprite,
      stage = new PIXI.Container(),
      carrotTex = PIXI.Texture.fromImage('/student/globalit/2019/330187/learningPixi-master/examples/images/blob.png');
    Text = PIXI.Text,
      TextStyle = PIXI.TextStyle;


    //Create a Pixi Application
    var app = new Application({
      width: 0,
      height: 0,
      antialiasing: true,
      transparent: true,
      resolution: 1
    });

    var background = new PIXI.Graphics();
    background.beginFill(0x123456);
    background.drawRect(0, 0, 1920, 1080);
    background.endFill();
    stage.addChild(background);


    var renderer = PIXI.autoDetectRenderer(1920, 1080, {
      backgroundColor: 0x1099bb
    });
    document.body.appendChild(renderer.view);
    //Add the canvas that Pixi automatically created for you to the HTML document
    document.body.appendChild(app.view);

    loader
      .add("/student/globalit/2019/330187/learningPixi-master/examples/images/cat.png")
      .add("/student/globalit/2019/330187/learningPixi-master/examples/images/blob.png")
      .load(setup);

    //Define any variables that are used in more than one function
    var cat, state, shoot, cat2, position, bullets;

    function shoot(rotation, startPosition) {
      var bullet = new PIXI.Sprite(carrotTex);
      bullet.position.x = startPosition.x;
      bullet.position.y = startPosition.y;
      bullet.rotation = rotation;
      stage.addChild(bullet);
      bullets.push(bullet);
    }



    function setup() {
		
		

      //Create the `cat` sprite 
      cat = new Sprite(resources["/student/globalit/2019/330187/learningPixi-master/examples/images/cat.png"].texture);
      cat2 = new Sprite(resources["/student/globalit/2019/330187/learningPixi-master/examples/images/cat.png"].texture);
      cat.anchor.x = 0.5;
      cat.anchor.y = 0.5;
      cat2.anchor.x = 0.5;
      cat2.anchor.y = 0.5;
      cat.y = 96;
      cat.vx = 0;
      cat.vy = 0;
      cat.position.x = 600;
      cat.position.y = 200;
      cat2.position.x = 250;
      cat2.position.y = 200;
      stage.addChild(cat);
      stage.addChild(cat2);


      //Capture the keyboard arrow keys
      let left = keyboard(65),
        up = keyboard(87),
        right = keyboard(68),
        down = keyboard(83),
        space = keyboard(32);


      //Space key `press` method
      space.press = () => {
        shoot(cat.rotation, {
          x: cat.position.x + Math.cos(cat.rotation) * 20,
          y: cat.position.y + Math.sin(cat.rotation) * 20
        });
        var bullets = [];
        var bulletSpeed = .5;
      };


      //Left arrow key `press` method
      left.press = () => {
        cat.vx = -5;
        cat.vy = 0;
      };

      //Left arrow key `release` method
      left.release = () => {
        //If the left arrow has been released, and the right arrow isn't down,
        //and the cat isn't moving vertically:
        //Stop the cat
        if (!right.isDown && cat.vy === 0) {
          cat.vx = 0;
        }
      };

      //Up
      up.press = () => {
        cat.vy = -5;
        cat.vx = 0;
      };
      up.release = () => {
        if (!down.isDown && cat.vx === 0) {
          cat.vy = 0;
        }
      };

      //Right
      right.press = () => {
        cat.vx = 5;
        cat.vy = 0;
      };
      right.release = () => {
        if (!left.isDown && cat.vy === 0) {
          cat.vx = 0;
        }
      };

      //Down
      down.press = () => {
        cat.vy = 5;
        cat.vx = 0;
      };
      down.release = () => {
        if (!up.isDown && cat.vx === 0) {
          cat.vy = 0;
        }
      };

      //Create the text sprite
      let style = new TextStyle({
        fontFamily: "sans-serif",
        fontSize: 18,
        fill: "white",
      });
      message = new Text("No collision...", style);
      message.position.set(8, 8);
      stage.addChild(message);

      //Set the game state
      state = play;

      //Start the game loop 
      app.ticker.add(delta => gameLoop(delta));
    }

    function gameLoop(delta) {
      //Update the current game state:
      state(delta);
    }

    function play(delta) {

      //Use the cat's velocity to make it move
      cat.x += cat.vx;
      cat.y += cat.vy
        //check for a collision between the cat and the box

      if (hitTestRectangle(cat, cat2)) {

        //if there's a collision, change the message text
        message.text = "hit!";
        shoot(cat.rotation, {
          x: cat.position.x + Math.cos(cat.rotation) * 20,
          y: cat.position.y + Math.sin(cat.rotation) * 20
        });

      } else {

        //if there's no collision, reset the message
        //text and the box's color
        message.text = "No collision...";
      }

    }

    //The `hitTestRectangle` function
    function hitTestRectangle(r1, r2) {

      //Define the variables we'll need to calculate
      let hit, combinedHalfWidths, combinedHalfHeights, vx, vy;

      //hit will determine whether there's a collision
      hit = false;

      //Find the center points of each sprite
      r1.centerX = r1.x + r1.width / 2;
      r1.centerY = r1.y + r1.height / 2;
      r2.centerX = r2.x + r2.width / 2;
      r2.centerY = r2.y + r2.height / 2;

      //Find the half-widths and half-heights of each sprite
      r1.halfWidth = r1.width / 2;
      r1.halfHeight = r1.height / 2;
      r2.halfWidth = r2.width / 2;
      r2.halfHeight = r2.height / 2;

      //Calculate the distance vector between the sprites
      vx = r1.centerX - r2.centerX;
      vy = r1.centerY - r2.centerY;

      //Figure out the combined half-widths and half-heights
      combinedHalfWidths = r1.halfWidth + r2.halfWidth;
      combinedHalfHeights = r1.halfHeight + r2.halfHeight;

      //Check for a collision on the x axis
      if (Math.abs(vx) < combinedHalfWidths) {

        //A collision might be occuring. Check for a collision on the y axis
        if (Math.abs(vy) < combinedHalfHeights) {

          //There's definitely a collision happening
          hit = true;
        } else {

          //There's no collision on the y axis
          hit = false;
        }
      } else {

        //There's no collision on the x axis
        hit = false;
      }

      //`hit` will be either `true` or `false`
      return hit;
    };



    //The `keyboard` helper function
    function keyboard(keyCode) {
      var key = {};
      key.code = keyCode;
      key.isDown = false;
      key.isUp = true;
      key.press = undefined;
      key.release = undefined;
      //The `downHandler`
      key.downHandler = event => {
        if (event.keyCode === key.code) {
          if (key.isUp && key.press) key.press();
          key.isDown = true;
          key.isUp = false;
        }
        event.preventDefault();
      };

      //The `upHandler`
      key.upHandler = event => {
        if (event.keyCode === key.code) {
          if (key.isDown && key.release) key.release();
          key.isDown = false;
          key.isUp = true;
        }
        event.preventDefault();
      };

      //Attach event listeners
      window.addEventListener(
        "keydown", key.downHandler.bind(key), false
      );
      window.addEventListener(
        "keyup", key.upHandler.bind(key), false
      );
      return key;


    }

    stage.interactive = true;

    stage.on("mousedown", function(e) {
      shoot(cat.rotation, {
        x: cat.position.x + Math.cos(cat.rotation) * 20,
        y: cat.position.y + Math.sin(cat.rotation) * 20
      });
    })
    var bullets = [];
    var bulletSpeed = 9;


    function rotateToPoint(mx, my, px, py) {
      var self = this;
      var dist_Y = my - py;
      var dist_X = mx - px;
      var angle = Math.atan2(dist_Y, dist_X);
      //var degrees = angle * 180/ Math.PI;
      return angle;
    }



    // start animating
    animate();

    function animate() {
      requestAnimationFrame(animate);

      // just for fun, let's rotate mr rabbit a little
      cat.rotation = rotateToPoint(renderer.plugins.interaction.mouse.global.x, renderer.plugins.interaction.mouse.global.y, cat.position.x, cat.position.y);

      for (var b = bullets.length - 1; b >= 0; b--) {
        bullets[b].position.x += Math.cos(bullets[b].rotation) * bulletSpeed;
        bullets[b].position.y += Math.sin(bullets[b].rotation) * bulletSpeed;
      }
      // render the app
      renderer.render(stage);
    }
  </script>
</body>
